/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fi.ston.models


import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param askAddress Address of the wallet to which the operation is simulated
 * @param askUnits Token units asked
 * @param feeAddress Fee address
 * @param feePercent fee percent
 * @param feeUnits Fee units
 * @param minAskUnits Minimal amount of ask units
 * @param offerAddress Address of the wallet from which the operation is simulated
 * @param offerUnits Token units offered
 * @param poolAddress Address of the pool
 * @param priceImpact Price impact
 * @param routerAddress Address of the operation router
 * @param slippageTolerance Difference between the original price of order and the final price
 * @param swapRate Swap rate
 */


data class DexReverseSimulateSwap200Response (

    /* Address of the wallet to which the operation is simulated */
    @Json(name = "ask_address")
    val askAddress: kotlin.String,

    /* Token units asked */
    @Json(name = "ask_units")
    val askUnits: kotlin.String,

    /* Fee address */
    @Json(name = "fee_address")
    val feeAddress: kotlin.String,

    /* fee percent */
    @Json(name = "fee_percent")
    val feePercent: kotlin.String,

    /* Fee units */
    @Json(name = "fee_units")
    val feeUnits: kotlin.String,

    /* Minimal amount of ask units */
    @Json(name = "min_ask_units")
    val minAskUnits: kotlin.String,

    /* Address of the wallet from which the operation is simulated */
    @Json(name = "offer_address")
    val offerAddress: kotlin.String,

    /* Token units offered */
    @Json(name = "offer_units")
    val offerUnits: kotlin.String,

    /* Address of the pool */
    @Json(name = "pool_address")
    val poolAddress: kotlin.String,

    /* Price impact */
    @Json(name = "price_impact")
    val priceImpact: kotlin.String,

    /* Address of the operation router */
    @Json(name = "router_address")
    val routerAddress: kotlin.String,

    /* Difference between the original price of order and the final price */
    @Json(name = "slippage_tolerance")
    val slippageTolerance: kotlin.String,

    /* Swap rate */
    @Json(name = "swap_rate")
    val swapRate: kotlin.String

)

