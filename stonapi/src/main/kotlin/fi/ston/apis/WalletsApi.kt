/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package fi.ston.apis

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import fi.ston.models.GetAssetList200Response
import fi.ston.models.GetFarmList200Response
import fi.ston.models.GetOperationStats200Response
import fi.ston.models.GetPoolList200Response

import com.squareup.moshi.Json

import fi.ston.infrastructure.ApiClient
import fi.ston.infrastructure.ApiResponse
import fi.ston.infrastructure.ClientException
import fi.ston.infrastructure.ClientError
import fi.ston.infrastructure.ServerException
import fi.ston.infrastructure.ServerError
import fi.ston.infrastructure.MultiValueMap
import fi.ston.infrastructure.PartConfig
import fi.ston.infrastructure.RequestConfig
import fi.ston.infrastructure.RequestMethod
import fi.ston.infrastructure.ResponseType
import fi.ston.infrastructure.Success
import fi.ston.infrastructure.toMultiValue

class WalletsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * 
     * 
     * @param addrStr 
     * @return GetAssetList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getWalletAssets(addrStr: kotlin.String) : GetAssetList200Response {
        val localVarResponse = getWalletAssetsWithHttpInfo(addrStr = addrStr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetAssetList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param addrStr 
     * @return ApiResponse<GetAssetList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getWalletAssetsWithHttpInfo(addrStr: kotlin.String) : ApiResponse<GetAssetList200Response?> {
        val localVariableConfig = getWalletAssetsRequestConfig(addrStr = addrStr)

        return request<Unit, GetAssetList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getWalletAssets
     *
     * @param addrStr 
     * @return RequestConfig
     */
    fun getWalletAssetsRequestConfig(addrStr: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/wallets/{addr_str}/assets".replace("{"+"addr_str"+"}", encodeURIComponent(addrStr.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param addrStr 
     * @return GetFarmList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getWalletFarm(addrStr: kotlin.String) : GetFarmList200Response {
        val localVarResponse = getWalletFarmWithHttpInfo(addrStr = addrStr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetFarmList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param addrStr 
     * @return ApiResponse<GetFarmList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getWalletFarmWithHttpInfo(addrStr: kotlin.String) : ApiResponse<GetFarmList200Response?> {
        val localVariableConfig = getWalletFarmRequestConfig(addrStr = addrStr)

        return request<Unit, GetFarmList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getWalletFarm
     *
     * @param addrStr 
     * @return RequestConfig
     */
    fun getWalletFarmRequestConfig(addrStr: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/wallets/{addr_str}/farms".replace("{"+"addr_str"+"}", encodeURIComponent(addrStr.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param addrStr 
     * @param since Time since the stats are requested (YYYY-MM-DDTHH:MM:SS)
     * @param until Time until pool stats are requested (YYYY-MM-DDTHH:MM:SS)
     * @param opType target op type (optional)
     * @return GetOperationStats200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getWalletOperations(addrStr: kotlin.String, since: kotlin.String, until: kotlin.String, opType: kotlin.String? = null) : GetOperationStats200Response {
        val localVarResponse = getWalletOperationsWithHttpInfo(addrStr = addrStr, since = since, until = until, opType = opType)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetOperationStats200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param addrStr 
     * @param since Time since the stats are requested (YYYY-MM-DDTHH:MM:SS)
     * @param until Time until pool stats are requested (YYYY-MM-DDTHH:MM:SS)
     * @param opType target op type (optional)
     * @return ApiResponse<GetOperationStats200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getWalletOperationsWithHttpInfo(addrStr: kotlin.String, since: kotlin.String, until: kotlin.String, opType: kotlin.String?) : ApiResponse<GetOperationStats200Response?> {
        val localVariableConfig = getWalletOperationsRequestConfig(addrStr = addrStr, since = since, until = until, opType = opType)

        return request<Unit, GetOperationStats200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getWalletOperations
     *
     * @param addrStr 
     * @param since Time since the stats are requested (YYYY-MM-DDTHH:MM:SS)
     * @param until Time until pool stats are requested (YYYY-MM-DDTHH:MM:SS)
     * @param opType target op type (optional)
     * @return RequestConfig
     */
    fun getWalletOperationsRequestConfig(addrStr: kotlin.String, since: kotlin.String, until: kotlin.String, opType: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("since", listOf(since.toString()))
                put("until", listOf(until.toString()))
                if (opType != null) {
                    put("op_type", listOf(opType.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/wallets/{addr_str}/operations".replace("{"+"addr_str"+"}", encodeURIComponent(addrStr.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }

    /**
     * 
     * 
     * @param addrStr 
     * @return GetPoolList200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getWalletPools(addrStr: kotlin.String) : GetPoolList200Response {
        val localVarResponse = getWalletPoolsWithHttpInfo(addrStr = addrStr)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetPoolList200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * 
     * 
     * @param addrStr 
     * @return ApiResponse<GetPoolList200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getWalletPoolsWithHttpInfo(addrStr: kotlin.String) : ApiResponse<GetPoolList200Response?> {
        val localVariableConfig = getWalletPoolsRequestConfig(addrStr = addrStr)

        return request<Unit, GetPoolList200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getWalletPools
     *
     * @param addrStr 
     * @return RequestConfig
     */
    fun getWalletPoolsRequestConfig(addrStr: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/v1/wallets/{addr_str}/pools".replace("{"+"addr_str"+"}", encodeURIComponent(addrStr.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = false,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
